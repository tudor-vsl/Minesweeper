import pygame, sys
from Minesweeper.Project.mine_board import *
from Minesweeper.Project.Images import *

BLACK = (100, 0, 100)
WHITE = (200, 200, 200)
height = 800
width = 600


block1 = pygame.image.load("block1.png")
block2 = pygame.image.load("block2.png")
block3 = pygame.image.load("block3.png")
block4 = pygame.image.load("block4.png")
blank = pygame.image.load("blankblock.png")
bomb = pygame.image.load("bomb.png")

def setup_board():
    rows = input("Input rows:")
    cols = input("Input cols:")
    no_of_bombs = input("Input no_of_bombs:")
    return rows,cols,no_of_bombs

def main():
    global window, CLOCK
    pygame.init()

    window = pygame.display.set_mode((height, width))
    pygame.display.get_surface().fill((200, 200, 200))
    CLOCK = pygame.time.Clock()


    #rows, cols, no_of_bombs = setup_board()
    #matrix = np.zeros((rows, cols), dtype=int)
    #board = Board(rows, cols, no_of_bombs, matrix)

    while True:
        drawGrid()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        #pygame.display.update()

def createSquare(x, y, color):
    pygame.draw.rect(window, color, [x, y, width, height])

def block(x, y, blockImg):
    window.blit(blockImg, (x, y))


def drawGrid():
    y = 0  # we start at the top of the screen
    for i in range(0,15):
        x = 0  # for every row we start at the left of the screen again
        for j in range(0,15):
            if test.main_matrix[i][j] == 1:
                block(x,y,block1)
            elif test.main_matrix[i][j] == 2:
                block(x,y,block2)
            elif test.main_matrix[i][j] == 3:
                block(x,y,block3)
            elif test.main_matrix[i][j] == 4:
                block(x,y,block4)
            elif test.main_matrix[i][j] == 0:
                block(x,y,blank)
            else:
                block(x, y, bomb)

            x += 15  # for ever item/number in that row we move one "step" to the right
        y += 15  # for every new row we move one "step" downwards
    pygame.display.update()

main()